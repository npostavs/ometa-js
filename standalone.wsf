<?xml version="1.0" standalone="yes"?>
<job>
  <?job error="true" debug="true"?>

  <script src="lib.js"></script>
  <script src="ometa-base.js"></script>
  <script src="parser.js"></script>
  <script src="bs-js-compiler.js"></script>
  <script src="bs-ometa-compiler.js"></script>
  <script src="bs-ometa-optimizer.js"></script>
  <script src="bs-ometa-js-compiler.js"></script>

  <runtime>
    <named name="START-RULE" helpstring="name of rule to match against in the grammar"
           type="string" many="false" required="1"/>
    <unnamed name="grammar" helpstring="file containing ometa/js grammar"
             many="false" required="1"/>
    <unnamed name="input" helpstring="files to process with given grammar, take stdin if none given"
             many="true" required="0"/>
  </runtime>
  <object id="FSO" progid="Scripting.FileSystemObject"/>

  <script language="JScript">
      //<![CDATA[
      var alert = function(s) { WSH.echo(s); }

      var translateCode = function(s) {
        var translationError = function(m, i) { alert("Translation error - please tell Alex about this!"); throw fail },
            tree             = BSOMetaJSParser.matchAll(s, "topLevel", undefined, function(m, i) {
                                                                                    throw objectThatDelegatesTo(fail, {errorPos: i}) })
        return BSOMetaJSTranslator.match(tree, "trans", undefined, translationError)
      }
      var ometa = function(s) {
        return eval(translateCode(s))
      }

      var argv = WSH.Arguments.Unnamed;
      var start_rule = WSH.Arguments.Named("START-RULE");
      if (argv.length < 1 || !start_rule) {
         WSH.Arguments.ShowUsage();
         WSH.quit(1);
      }

      var grammar = ometa(FSO.OpenTextFile(argv(0)).readAll());

      if (argv.length > 1) {
          for (var i = 1; i < argv.length; i++) {
             WSH.StdOut.write(grammar.matchAll(FSO.OpenTextFile(argv(i)).readAll(), start_rule));
          }
      } else {
          WSH.StdOut.write(grammar.matchAll(WSH.StdIn.readAll(), start_rule));
      }
      //]]>
  </script>
</job>
